;;Jeffrey Yeh
;;CS61A-BM
;;Section 13 (TuTh 12:30-2:00)


;;Project 1 - Twenty-One


(define (twenty-one strategy)
  (define (play-dealer customer-hand dealer-hand-so-far rest-of-deck)
    (cond ((> (best-total dealer-hand-so-far) 21) 1)
	  ((< (best-total dealer-hand-so-far) 17)
	   (play-dealer customer-hand
			(se dealer-hand-so-far (first rest-of-deck))
			(bf rest-of-deck)))
	  ((< (best-total customer-hand) (best-total dealer-hand-so-far)) -1)
	  ((= (best-total customer-hand) (best-total dealer-hand-so-far)) 0)
	  (else 1)))

  (define (play-customer customer-hand-so-far dealer-up-card rest-of-deck)
    (cond ((> (best-total customer-hand-so-far) 21) -1)
	  ((strategy customer-hand-so-far dealer-up-card)
	   (play-customer (se customer-hand-so-far (first rest-of-deck))
			  dealer-up-card
			  (bf rest-of-deck)))
	  (else
	   (play-dealer customer-hand-so-far
			(se dealer-up-card (first rest-of-deck))
			(bf rest-of-deck)))))

  (let ((deck (make-deck)))
    (play-customer (se (first deck) (first (bf deck)))
		   (first (bf (bf deck)))
		   (bf (bf (bf deck))))) )

(define (make-ordered-deck)
  (define (make-suit s)
    (every (lambda (rank) (word rank s)) '(A 2 3 4 5 6 7 8 9 10 J Q K)) )
  (se (make-suit 'H) (make-suit 'S) (make-suit 'D) (make-suit 'C)) )

(define (make-deck)
  (define (shuffle deck size)
    (define (move-card in out which)
      (if (= which 0)
	  (se (first in) (shuffle (se (bf in) out) (- size 1)))
	  (move-card (bf in) (se (first in) out) (- which 1)) ))
    (if (= size 0)
	deck
    	(move-card deck '() (random size)) ))
  (shuffle (make-ordered-deck) 52) )


;;End of prewritten code
;;__________________________________________________________________________

;;1. Best-Total

(define (best-total hand) ;returns largest possible total thats less than 21
  (final-value hand (accumulate + 0 (every show-value hand)))) ;adds the value of all the cards while accounting for the original hand
(define (show-value card) ;helper for best-total which converts the card to an actual numberical value, except for Aces, which is given the value of 11 for now as a default
  (cond ((equal? (first card) 'a) 11)
	((equal? (first card) 'k) 10)
	((equal? (first card) 'q) 10)
	((equal? (first card) 'j) 10)
	((equal? (first card) 1) 10)
	((number? (first card)) (first card))
	(else 'error?))) ;this should technically never happen...
(define (final-value hand value) 
  (cond ((> 22 value) value) ;if your hand's value is normally less than 22 (1-21) then it will just display the value.
        ((and (not (empty? hand)) (> value 21) (equal? 'a (first (first hand)))) (final-value (bf hand) (- value 10))) ;if over 21 and your first card is an  ace, it will decrease the value by 10 (11 --> 1).
	((and (not (empty? hand)) (> value 21) (not (equal? 'a (first (first hand))))) (final-value (bf hand) value)) ;if over 21 and first card is not an ace, then it will recurse and check to see if the next card is an ace.
	(else value))) ;in this case, your hand is over 21 and you have no aces to reduce your hand's value. you lose.

;;2. Stop-At-17

(define (stop-at-17 customer-hand-so-far dealer-up-card)
  (< (best-total customer-hand-so-far) 17)) ;self explanatory, returns false once the value of the hand exceeds or is equal to 17.

;;3. Play-N

(define (play-n strategy n)
  (cond ((< n 1) 'error) ;for an incompatible n value
	((= n 1) (twenty-one strategy)) ;base case to do one final game / recursion
	(else (+ (twenty-one strategy) (play-n strategy (- n 1)))))) ;does a game to get +1 0 or -1 and then adds the results together to get total number of games won.

;;4. Dealer-Sensitive

(define (dealer-sensitive customer-hand-so-far dealer-up-card)
  (cond ((and (member? (first dealer-up-card) '(a 7 8 9 1 j q k)) (< (best-total customer-hand-so-far) 17)) #t)
	((and (member? (first dealer-up-card) '(2 3 4 5 6)) (< (best-total customer-hand-so-far) 12)) #t)
	(else #f)))

;;5. Stop-At

(define (stop-at n)
  (lambda (customer-hand-so-far dealer-up-card) (< (best-total customer-hand-so-far) n))) ;this makes it so that it returns a function with two variables while still accounting for n

;;6. Valentine

(define (valentine customer-hand-so-far dealer-up-card)
  (if (and (member? 'h (every last customer-hand-so-far)) (< (best-total customer-hand-so-far) 19))
      #t
      (stop-at-17 customer-hand-so-far dealer-up-card))) ;with no hearts or a value greater than 19, then valentine would act like stop-at-17 anyways.

;;7. Suit Strategy

(define (suit-strategy suit no-suit-strat suit-strat)
  (lambda (customer-hand-so-far dealer-up-card) (if (member? suit (every last customer-hand-so-far)) ;checks for the suit in the customer's hand.
						    (suit-strat customer-hand-so-far dealer-up-card) ;strategy to take if he has that suit.
						    (no-suit-strat customer-hand-so-far dealer-up-card)))) ;strategy to take if he does not have that suit.

;;8. Majority

(define (majority strat1 strat2 strat3)
  (lambda (customer-hand-so-far dealer-up-card) (<= 2 ;if at least 2 say #t
						    (+ (check-strat strat1 customer-hand-so-far dealer-up-card)
						       (check-strat strat2 customer-hand-so-far dealer-up-card)
						       (check-strat strat3 customer-hand-so-far dealer-up-card))))) ;running through the three strategies
(define (check-strat strat customer-hand-so-far dealer-up-card) ;this converts the #t and #f results into a value which can be added, namely numbers
  (if (strat customer-hand-so-far dealer-up-card)
      1
      0))


;;9. Reckless

(define (reckless strategy)
  (lambda (customer-hand-so-far dealer-up-card) (strategy (butlast customer-hand-so-far) dealer-up-card))) ;straightforward, it just takes the butlast of the player's hand...

;;10. JOKERS
;;in a separate file.

;;TEST CASES
;;in a separate file.

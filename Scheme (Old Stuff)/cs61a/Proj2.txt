;;Jeffrey Yeh
;;CS61A-BM
;;Section 113 TuTh 12:30-2:00
;;GSI: Ahmed

;;Project 2

;______________________________________________________________________________
;Code Provided by the CS61A library
;; Code for CS61A project 2 -- picture language

(define (flipped-pairs painter)
  (let ((painter2 (beside painter (flip-vert painter))))
    (below painter2 painter2)))

(define (right-split painter n)
  (if (= n 0)
      painter
      (let ((smaller (right-split painter (- n 1))))
	(beside painter (below smaller smaller)))))

(define (corner-split painter n)
  (if (= n 0)
      painter
      (let ((up (up-split painter (- n 1)))
	    (right (right-split painter (- n 1))))
	(let ((top-left (beside up up))
	      (bottom-right (below right right))
	      (corner (corner-split painter (- n 1))))
	  (beside (below painter top-left)
		  (below bottom-right corner))))))

(define (square-limit painter n)
  (let ((quarter (corner-split painter n)))
    (let ((half (beside (flip-horiz quarter) quarter)))
      (below (flip-vert half) half))))

(define (square-of-four tl tr bl br)
  (lambda (painter)
    (let ((top (beside (tl painter) (tr painter)))
	  (bottom (beside (bl painter) (br painter))))
      (below bottom top))))

(define (identity x) x)

(define (flipped-pairs painter)
  (let ((combine4 (square-of-four identity flip-vert
				  identity flip-vert)))
    (combine4 painter)))

;; or

; (define flipped-pairs
;   (square-of-four identity flip-vert identity flip-vert))

(define (square-limit painter n)
  (let ((combine4 (square-of-four flip-horiz identity
				  rotate180 flip-vert)))
    (combine4 (corner-split painter n))))

(define (frame-coord-map frame)
  (lambda (v)
    (add-vect
     (origin-frame frame)
     (add-vect (scale-vect (xcor-vect v)
			   (edge1-frame frame))
	       (scale-vect (ycor-vect v)
			   (edge2-frame frame))))))

(define (segments->painter segment-list)
  (lambda (frame)
    (for-each
     (lambda (segment)
       (draw-line
	((frame-coord-map frame) (start-segment segment))
	((frame-coord-map frame) (end-segment segment))))
     segment-list)))

(define (draw-line v1 v2)
  (penup)
  (setxy (- (* (xcor-vect v1) 200) 100)
	 (- (* (ycor-vect v1) 200) 100))
  (pendown)
  (setxy (- (* (xcor-vect v2) 200) 100)
	 (- (* (ycor-vect v2) 200) 100)))

(define (transform-painter painter origin corner1 corner2)
  (lambda (frame)
    (let ((m (frame-coord-map frame)))
      (let ((new-origin (m origin)))
	(painter
	 (make-frame new-origin
		     (sub-vect (m corner1) new-origin)
		     (sub-vect (m corner2) new-origin)))))))

(define (flip-vert painter)
  (transform-painter painter
		     (make-vect 0.0 1.0)
		     (make-vect 1.0 1.0)
		     (make-vect 0.0 0.0)))

(define (shrink-to-upper-right painter)
  (transform-painter painter
		    (make-vect 0.5 0.5)
		    (make-vect 1.0 0.5)
		    (make-vect 0.5 1.0)))

(define (rotate90 painter)
  (transform-painter painter
		     (make-vect 1.0 0.0)
		     (make-vect 1.0 1.0)
		     (make-vect 0.0 0.0)))

(define (squash-inwards painter)
  (transform-painter painter
		     (make-vect 0.0 0.0)
		     (make-vect 0.65 0.35)
		     (make-vect 0.35 0.65)))

(define (beside painter1 painter2)
  (let ((split-point (make-vect 0.5 0.0)))
    (let ((paint-left
	   (transform-painter painter1
			      (make-vect 0.0 0.0)
			      split-point
			      (make-vect 0.0 1.0)))
	  (paint-right
	   (transform-painter painter2
			      split-point
			      (make-vect 1.0 0.0)
			      (make-vect 0.5 1.0))))
      (lambda (frame)
	(paint-left frame)
	(paint-right frame)))))

;;
;; Your code goes here
;;

;______________________________________________________________________________
;;Begin: My Own Code

;2.44
(define (up-split painter n)
  (if (= n 0)
      painter
      (let ((smaller (up-split painter (- n 1))))
	(below painter (beside smaller smaller))))) ;like the book said, I swapped the roles of below/beside and used the same code as right-split

;2.45
(define (split direction1 direction2) ;i'm not sure what "below"/"beside" are so I'll call them directions...?
  (define (split-helper painter n);same argument intake/form as right-split/up-split
    (if (= n 0)
        painter
        (let ((smaller (split-helper painter (- n 1))))
       	  (direction1 painter (direction2 smaller smaller)))))
  split-helper)
;this will make it return a procedure, which is what right split and up-split are... i think... It calls it with no arguments so that when you type (right-split painter n) it will then have the necessary procedures to go with it... if you know what I mean.  Sorry I'm bad at explaining this it seems so abstract.

;2.46
(define (make-vect x y) ;makes a pair
  (cons x y))
(define (xcor-vect vector) ;selects the first entry (x)
  (car vector))
(define (ycor-vect vector) ;selects the second entry (y)
  (cdr vector))
(define (add-vect vect1 vect2) ;adds the x and y coordinates independently and then puts them back into one vector
  (make-vect (+ (xcor-vect vect1)
		(xcor-vect vect2))
	     (+ (ycor-vect vect1)
		(ycor-vect vect2))))
(define (sub-vect vect1 vect2) ;same as add-vect, but this time with a -
  (make-vect (- (xcor-vect vect1)
		(xcor-vect vect2))
	     (- (ycor-vect vect1)
		(ycor-vect vect2))))
(define (scale-vect scalar vector) ;scalar multiplication!
  (make-vect (* (xcor-vect vector) scalar)
	     (* (ycor-vect vector) scalar)))
;this was fairly easy, I just have to say that I don't like how the book named it xcor-vect and ycor-vect... i mean, xcor? i'd prefer to type out x-coor-vect than xcor-vect...

;2.47
;for the first make frame
(define (make-frame origin edge1 edge2)
  (list origin edge1 edge2))
(define (origin-frame frame)
  (car frame))
(define (edge1-frame frame)
  (cadr frame))
(define (edge2-frame frame)
  (caddr frame))

;for the second make-frame
(define (make-frame origin edge1 edge2) ;i don't really get this one. A list in the first one makes sense, but the cons of the origin into the pair doesn't make as much sense...i suppose.
  (cons origin (cons edge1 edge2)))
(define (origin-frame frame)
  (car frame))
(define (edge1-frame frame)
  (cadr frame))
(define (edge2-frame frame) ;no extra "a" because it's a pair
  (cddr frame))

;2.48
(define (make-segment vector1 vector2)
  (cons vector1 vector2))
;or is it...?
;(define (make-segment x1 y1 x2 y2)
;  (cons (make-vector x1 x2) (make-vector x2 y2)))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))
;I feel like this is the correct constructor/selectors... they have the right form and all... but It's not using the cons/selectors from 2.46 as the book suggests i do.

;2.49
;segments->painter returns a procedure when given a single argument of a list of segments. I assume this procedure will be used with the frame size?
;a.
(define paint-frame
  (segments->painter (list (make-segment (make-vect 0 0) (make-vect 1 0)) ;it is a unit square after all
			   (make-segment (make-vect 1 0) (make-vect 1 1))
			   (make-segment (make-vect 0 1) (make-vect 0 0))
			   (make-segment (make-vect 1 1) (make-vect 0 1)))))
;b.
(define paint-x
  (segments->painter (list (make-segment (make-vect 1 0) (make-vect 0 1))
	                   (make-segment (make-vect 0 0) (make-vect 1 1)))))
;c.
(define paint-diamond
  (segments->painter (list (make-segment (make-vect .5 0) (make-vect 0 .5))
                           (make-segment (make-vect .5 1) (make-vect 0 .5))
                           (make-segment (make-vect .5 0) (make-vect 1 .5))
                           (make-segment (make-vect .5 1) (make-vect 1 .5)))))
;d.
;WOW you're kidding me.  Do I need to actually measure this wave pattern? My friend who already took 61A says i do... hopefully he's not just tricking me...
(define wave
  (segments->painter (list (make-segment (make-vect 0 0.6) (make-vect 0.15 0.45))
			   (make-segment (make-vect 0.15 0.45) (make-vect 0.3 0.6))
			   (make-segment (make-vect 0.3 0.6) (make-vect 0.35 0.55))
			   (make-segment (make-vect 0.35 0.55) (make-vect 0.25 0))
			   (make-segment (make-vect 0.35 0) (make-vect 0.45 0.35))
			   (make-segment (make-vect 0.45 0.35) (make-vect 0.6 0))
			   (make-segment (make-vect 0.75 0) (make-vect 0.6 0.45))
			   (make-segment (make-vect 0.6 0.45) (make-vect 1 0.20))
			   (make-segment (make-vect 1 0.3) (make-vect 0.7 0.65))
			   (make-segment (make-vect 0.7 0.65) (make-vect 0.6 0.65))
			   (make-segment (make-vect 0.6 0.65) (make-vect 0.65 0.85))
			   (make-segment (make-vect 0.65 0.85) (make-vect 0.6 1))
			   (make-segment (make-vect 0.4 1) (make-vect 0.35 0.85))
			   (make-segment (make-vect 0.35 0.85) (make-vect 0.4 0.65))
			   (make-segment (make-vect 0.4 0.65) (make-vect 0.3 0.65))
			   (make-segment (make-vect 0.3 0.65) (make-vect 0.15 0.6))
			   (make-segment (make-vect 0.15 0.6) (make-vect 0 0.9))))) ;this was much too tedious.
;I know my measurements may be a bit off. It was really late when I did this... But there is no way I'm going to do it again... =(


;2.50
(define (flip-horiz painter)
  (transform-painter painter
		     (make-vect 1 0) ;origin and edge1 swap positions
		     (make-vect 0 0)
		     (make-vect 1 1)))
(define (flip-180 painter)
  (transform-painter painter
		     (make-vect 1 1)
		     (make-vect 0 1)
		     (make-vect 1 0)))
(define (flip-270 painter)
  (transform-painter painter
		     (make-vect 0 1)
		     (make-vect 0 0)
		     (make-vect 1 1)))

;2.51
(define (below painter1 painter2)
  (let ((split-point (make-vect 0 0.5)))
    (let ((paint-top
	   (transform-painter painter2
			      split-point
			      (make-vect 1 .5)
			      (make-vect 0 1)))
	  (paint-bot ;does painter 1 go above or below painter 2? I'll assume below
	   (transform-painter painter1
			      (make-vect 0 0)
			      (make-vect 1 0)
			      split-point)))
    (lambda (frame)
      (paint-top frame)
      (paint-bot frame))))) ;using the same form as beside

(define (below painter1 painter2)
  (flip-270 (beside (rotate90 painter2) (rotate90 painter1)))) ;fairly straightforwards, used the given rotate90 and flip-270 and beside to make the new below

;2.52
;a
(define wave-edit
  (segments->painter (list (make-segment (make-vect 0 0.6) (make-vect 0.15 0.45))
			   (make-segment (make-vect 0.15 0.45) (make-vect 0.3 0.6))
			   (make-segment (make-vect 0.3 0.6) (make-vect 0.35 0.55))
			   (make-segment (make-vect 0.35 0.55) (make-vect 0.25 0))
			   (make-segment (make-vect 0.35 0) (make-vect 0.45 0.35))
			   (make-segment (make-vect 0.45 0.35) (make-vect 0.6 0))
			   (make-segment (make-vect 0.75 0) (make-vect 0.6 0.45))
			   (make-segment (make-vect 0.6 0.45) (make-vect 1 0.20))
			   (make-segment (make-vect 1 0.3) (make-vect 0.7 0.65))
			   (make-segment (make-vect 0.7 0.65) (make-vect 0.6 0.65))
			   (make-segment (make-vect 0.6 0.65) (make-vect 0.65 0.85))
			   (make-segment (make-vect 0.65 0.85) (make-vect 0.6 1))
			   (make-segment (make-vect 0.4 1) (make-vect 0.35 0.85))
			   (make-segment (make-vect 0.35 0.85) (make-vect 0.4 0.65))
			   (make-segment (make-vect 0.4 0.65) (make-vect 0.3 0.65))
			   (make-segment (make-vect 0.3 0.65) (make-vect 0.15 0.6))
			   (make-segment (make-vect 0.15 0.6) (make-vect 0 0.9))
			   (make-segment (make-vect 0.4 0.8) (make-vect 0.5 0.7))
			   (make-segment (make-vect 0.5 0.7) (make-vect 0.55 0.8)))))
;b
(define (corner-split-edit painter n)
  (if (= n 0)
      painter
      (let ((up (up-split painter (- n 1)))
	    (right (right-split painter (- n 1))))
	(let ((top-left (beside up up))
	      (bottom-right (below right right))
	      (corner (corner-split-edit painter (- n 1))))
	  (beside (below painter bottom-right) ;i traded the top-left for a bottom right here
		  (below top-left corner)))))) ;i traded a bottom-right for a top-left here
;c
(define (square-limit-edit painter n)
  (let ((combine4 (square-of-four flip-horiz identity
				  flip-180 flip-vert))) ;i named my rotate180 something different
    (combine4 (corner-split (flip-270 painter) n)))) ;modified so that it rotates 270 degrees


;______________________________________________________________________________
;Full-frame has to be defined AFTER my code because it utilizes make-vect which I defined in problem 2.46... right?
(define full-frame (make-frame (make-vect -0.5 -0.5)
			       (make-vect 2 0)
			       (make-vect 0 2)))


;; While doing the last problem, I noticed that The pregiven code from the cs61a library assumed that I would name my programs certain names like rotate180 when instead I had named them something else (like flip-180).  Hopefully this will not impact my grade.
